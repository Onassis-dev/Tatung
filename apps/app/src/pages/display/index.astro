---
import "./display.css";
const apiBase = import.meta.env.PUBLIC_API_BASE;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tatung</title>
  </head>
  <body>
    <div id="data" class="hidden" data-api-base={apiBase}></div>
    <div class="dashboard">
      <!-- Header Cards -->
      <div class="header-grid">
        <!-- Model Card -->
        <div class="card">
          <div class="card-label">MODELO</div>
          <div class="card-value" id="model">model</div>
        </div>

        <!-- Production Line Card -->
        <div class="card">
          <div class="card-label">LINEA DE PRODUCCION</div>
          <div class="card-value" id="productionLine">line</div>
        </div>

        <!-- Current Time Card -->
        <div class="card">
          <div class="card-label">HORA Y FECHA</div>
          <div class="time-date" id="currentDate"></div>
          <div class="time-clock" id="currentTime"></div>
        </div>
      </div>

      <!-- Main Production Cards -->
      <div class="main-grid">
        <!-- Goal Card -->
        <div class="card main-card">
          <div class="main-card-content">
            <div class="main-card-label">OBJETIVO</div>
            <div class="main-card-value" id="goal">0</div>
            <div class="main-card-subtitle">Unidades de Produccion</div>
          </div>
        </div>

        <!-- Progress Card -->
        <div class="card main-card">
          <div class="main-card-content">
            <div class="main-card-label">PROGRESO</div>
            <div class="main-card-value progress-good" id="completed">0</div>
            <div class="main-card-subtitle">Unidades Completadas</div>
          </div>
        </div>
      </div>

      <div class="card" id="hours">
        <div class="hours-column">
          <div class="hours-row">Hora</div>
          <div class="hours-row">Meta</div>
          <div class="hours-row">Producido</div>
        </div>
      </div>
    </div>

    <div id="error" class="hidden"></div>
  </body>

  <script type="module">
    const completedDiv = document.querySelector("#completed");
    const goalDiv = document.querySelector("#goal");
    const model = document.querySelector("#model");
    const productionLine = document.querySelector("#productionLine");
    const currentTime = document.querySelector("#currentTime");
    const currentDate = document.querySelector("#currentDate");
    const dataDiv = document.querySelector("#data");
    const hours = document.querySelector("#hours");

    function updateTime() {
      const now = new Date();
      const timeString = now.toLocaleTimeString("es-ES", {
        hour12: false,
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
      });
      const dateString = now.toLocaleDateString("es-ES", {
        month: "2-digit",
        day: "2-digit",
        year: "numeric",
      });
      currentTime.textContent = timeString;
      currentDate.textContent = dateString;
    }

    async function updateProgress() {
      const error = document.querySelector("#error");
      let res;

      try {
        res = await fetch(dataDiv.dataset.apiBase + "/displays");
        const data = await res.json();
        if (!res.ok) return (error.textContent = data.ip);
        model.textContent = data.model;
        productionLine.textContent = data.line;

        // Elimina todos los elementos temporales de una vez
        hours.querySelectorAll(".hours-temp").forEach((el) => el.remove());

        const fragment = document.createDocumentFragment();

        for (const { hour, goal, prod } of data.hours) {
          const hourColumn = document.createElement("div");
          hourColumn.classList.add("hours-column", "hours-temp");

          const values = [hour, goal, prod];
          values.forEach((value, index) => {
            const hourRow = document.createElement("div");
            hourRow.classList.add("hours-row");
            if (index === 0) hourRow.textContent = value + ":00";
            else hourRow.textContent = value;

            if (index === 2) {
              if (prod < goal) hourRow.classList.add("hour-bad");
              else hourRow.classList.add("hour-good");
            }

            hourColumn.appendChild(hourRow);
          });

          fragment.appendChild(hourColumn);
        }
        hours.appendChild(fragment);

        const { prod, goal } = data.hours.find(
          (h) => h.hour === new Date().getHours()
        );

        completedDiv.textContent = prod;
        goalDiv.textContent = goal;

        if (prod >= goal) completedDiv.classList.remove("progress-bad");
        else completedDiv.classList.add("progress-bad");
      } catch (err) {
        console.log(err);
        error.textContent = err.message;
      } finally {
        if (res?.ok) {
          error.classList.add("hidden");
        } else {
          error.classList.remove("hidden");
        }
      }
    }

    function initDashboard() {
      updateTime();
      setInterval(updateTime, 1000);

      updateProgress();
      setInterval(updateProgress, 1500);
    }
    initDashboard();
  </script>
</html>
